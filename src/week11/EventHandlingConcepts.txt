# 이벤트 핸들링 (Event Handling) 개념 설명

이벤트 핸들링은 사용자와 프로그램 간의 상호작용을 처리하는 방식입니다. GUI 애플리케이션에서 주로 사용되며, 버튼 클릭, 키보드 입력, 마우스 이동 등의 사용자 입력에 대한 반응을 설정할 때 활용됩니다.

---

## 주요 개념

1. **이벤트(Event)**

   - 이벤트는 사용자가 프로그램과 상호작용할 때 발생하는 특정 행위입니다. 예를 들어, 버튼을 클릭하거나 키보드를 누르는 것이 이벤트입니다.
   - 이벤트는 **이벤트 소스**(Event Source)에서 발생하며, 이 소스는 주로 `JButton`, `JTextField`와 같은 GUI 컴포넌트입니다.

2. **이벤트 소스 (Event Source)**

   - 이벤트가 발생하는 객체로, 사용자가 상호작용하는 컴포넌트입니다.
   - 예를 들어, 버튼 클릭 이벤트는 버튼(`JButton`)이라는 이벤트 소스에서 발생하며, 이벤트가 발생할 때 리스너가 해당 이벤트를 감지하고 처리할 수 있도록 설정됩니다.

3. **이벤트 리스너 (Event Listener)**

   - 이벤트가 발생했을 때, 그에 대한 반응(동작)을 정의하는 객체입니다. 리스너는 이벤트가 발생하면 수행할 동작을 포함하고 있습니다.
   - 이벤트 리스너는 자바에서 **인터페이스**로 제공되며, 이를 구현한 클래스에서 이벤트 처리 동작을 정의해야 합니다. 대표적인 이벤트 리스너로는 `ActionListener`, `MouseListener`, `KeyListener` 등이 있습니다.
   - 예를 들어, `ActionListener`는 버튼 클릭 이벤트와 같은 일반적인 액션 이벤트를 처리합니다.

4. **이벤트 핸들러 (Event Handler)**

   - 이벤트 핸들러는 리스너가 구현하는 구체적인 메서드로, 이벤트가 발생할 때 호출됩니다.
   - 예를 들어, `ActionListener` 인터페이스의 `actionPerformed()` 메서드는 특정 이벤트가 발생할 때 호출되는 이벤트 핸들러 메서드입니다.
   - 이벤트 핸들러 메서드 안에 원하는 동작을 정의해 두면, 해당 이벤트가 발생했을 때 자동으로 실행됩니다.

---

## 이벤트 핸들링의 흐름

1. **이벤트 소스 설정**: 버튼과 같은 GUI 컴포넌트를 생성합니다.
2. **리스너 객체 생성 및 등록**: 이벤트 리스너를 구현한 객체를 만들고, 이벤트 소스에 연결하여 이벤트가 발생할 때 동작하도록 설정합니다.
3. **이벤트 발생 및 처리**: 사용자가 버튼을 클릭하거나 특정 동작을 할 때 이벤트가 발생하고, 이벤트 리스너가 이를 감지하여 미리 정의된 이벤트 핸들러 메서드를 호출해 동작을 수행합니다.

---

## 이벤트 핸들링의 장점

1. **유연성**: 프로그램이 다양한 이벤트에 대해 각각 다른 반응을 보일 수 있도록 해줍니다.
2. **모듈화**: 이벤트 처리 코드를 개별 클래스로 분리할 수 있어 코드의 유지보수성이 높아집니다.
3. **재사용성**: 동일한 리스너를 여러 이벤트 소스에 적용할 수 있어 코드 재사용이 용이합니다.

이벤트 핸들링은 GUI 애플리케이션의 필수 개념으로, 사용자와 애플리케이션 간의 상호작용을 효율적으로 처리할 수 있도록 합니다. 이를 통해 더욱 직관적이고 사용하기 쉬운 애플리케이션을 만들 수 있습니다.
